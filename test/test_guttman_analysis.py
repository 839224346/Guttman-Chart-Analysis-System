import unittest
import model.guttman_analysis as ad
import model.file_importing as fi


class GuttmanAnalysisTestCase(unittest.TestCase):

    def setUp(self) -> None:
        # The path should be configured as the full path of the test data file. TODO: I don't really understand why the relative path not working.
        path = "/Users/Apple/Documents/Google-Sync/SWEN90014 Master Project/Project/swen90014-2019-rv-quoll" \
               "/testdata/SampleAssessmentResult.xlsx"
        self.data = fi.readfile(path)
        self.data = fi.transpose(self.data)
        fi.sort_2d_array_mark(self.data)

        # self.data_should_be = [[3, 2, 3, 2, 0, 2, 2], [3, 2, 3, 2, 0, 2, 2],
        #                        [3, 2, 3, 2, 0, 2, 2], [3, 2, 3, 1, 0, 2, 2],
        #                        [3, 2, 3, 2, 0, 2, 0], [3, 2, 2, 1, 2, 0, 0],
        #                        [3, 2, 2, 1, 2, 0, 0], [3, 2, 2, 1, 0, 2, 0],
        #                        [1, 2, 3, 2, 0, 0, 2], [3, 2, 0, 0, 1, 1, 2],
        #                        [3, 2, 1, 1, 2, 0, 0], [3, 2, 1, 1, 2, 0, 0],
        #                        [3, 2, 1, 1, 1, 1, 0], [3, 2, 2, 1, 1, 0, 0],
        #                        [3, 0, 2, 1, 2, 0, 0], [3, 2, 1, 1, 1, 0, 0],
        #                        [3, 2, 0, 1, 1, 1, 0], [3, 2, 2, 1, 0, 0, 0],
        #                        [3, 2, 2, 1, 0, 0, 0], [3, 2, 1, 1, 1, 0, 0],
        #                        [3, 1, 2, 1, 1, 0, 0], [3, 2, 1, 1, 1, 0, 0],
        #                        [1, 1, 2, 1, 1, 1, 0], [3, 2, 1, 1, 0, 0, 0],
        #                        [0, 2, 3, 1, 1, 0, 0], [3, 2, 1, 1, 0, 0, 0],
        #                        [0, 2, 3, 1, 1, 0, 0], [3, 1, 0, 1, 1, 0, 0],
        #                        [0, 1, 2, 2, 1, 0, 0], [0, 2, 1, 1, 2, 0, 0],
        #                        [1, 1, 1, 1, 1, 0, 0], [3, 2, 0, 0, 0, 0, 0],
        #                        [3, 2, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0],
        #                        [1, 2, 1, 1, 0, 0, 0], [0, 2, 1, 1, 0, 0, 0],
        #                        [0, 1, 0, 1, 1, 1, 0], [3, 0, 0, 0, 0, 0, 0],
        #                        [0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0]]
        self.original_data = [['', 'etc…', 'Recognises steps in the teaching and learning cycle.', 'Defines 21st century competencies', 'etc…', 'etc…', 'etc…', 'etc…', 'Distinguishes between competence and content.', 'Identifies levels of competence.', 'etc…', 'Interprets learning progressions describing increasing competence.', 'Describes methods for assessment of competence.', 'Connects teaching and learning cycle to classroom practice.', 'Distinguishes between evidence and inference.', 'Lists methods of evidence collection.', 'etc…', 'Explains plan for meeting student needs.', 'Uses teaching and learning cycle to plan instruction.', 'etc…', 'etc…', 'etc…', 'etc…'],
                              ['student_id', '2.1.1', '1.3.1', '1.1.1', '3.1.1', '2.1.2', '3.1.2', '3.1.3', '1.2.1', '1.1.2', '4.1.1', '1.1.3', '1.2.2', '1.3.2', '1.4.1', '1.4.2', '4.1.2', '1.2.3', '1.3.3', '2.1.3', '2.1.4', '3.1.4', '4.1.3'],
                              ['664', 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                              ['674', 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                              ['686', 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                              ['671', 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                              ['670', 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                              ['679', 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['682', 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                              ['683', 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                              ['656', 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['662', 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['681', 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['663', 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['654', 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                              ['676', 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['677', 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['657', 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['680', 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['653', 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['666', 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['675', 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['669', 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['690', 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['652', 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['684', 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['678', 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['687', 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['658', 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['655', 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['659', 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['685', 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['673', 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['651', 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['661', 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['688', 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['667', 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['660', 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['668', 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['672', 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['689', 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              ['665', 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
        self.data_shoudlbe = [[1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]


        self.data_first_row_one = ad.clean_input(self.data)
        # Manipulate the data so that the first element in the list has zero standard deviation.
        self.data_first_row_one[0] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        # transposed data
        self.transposed_data = ad.transpose_matrix(self.data_shoudlbe)
    # Test if the clean_input function.
    def test_clean_input(self):
        self.assertTrue(ad.clean_input(self.original_data) == self.data_shoudlbe)

    # def test_get_0staddv_index(self):
    #     self.assertTrue(ad.get_0staddv_index(self.data_first_row_zero) == [0])
    #
    # def test_in_danger_list(self):
    #     self.assertTrue(ad.in_danger_list(ad.get_0staddv_index(self.data_first_row_zero), 0))
    #
    # def test_data_clean(self):
    #     data_cleaned = ad.clean_input(self.data)
    #     self.assertTrue(data_cleaned == self.data_should_be)
    #
    #
    # def test_transpose_matrix(self):
    #     self.assertTrue(self.data == ad.transpose_matrix(ad.transpose_matrix(self.data)))

    # The following test suites are testing the main algorithms. Since both correlation and similarity calculation
    # use the function retrieve_correlation_similarity(). This function is where the main logic is implemented.
    # Fow now, the test cases can not be judged if it is correct, or not. Since the answer is not given from the client.
    # We can only make test cases and see if the program outputs any illegal output.
    # def test_retrieve_correlation_similarity(self):
    #     data = ad.clean_input(self.data)
    #     data_trans = ad.transpose_matrix(data)
    #     for flag in ['Accumulation', 'Similarity', 'Correlation']:
    #         item = ad.retrieve_correlation_similarity(data, flag)
    #         for i in item:
    #             self.assertTrue(-1 <= i <= 1)
    #         item = ad.retrieve_correlation_similarity(data_trans, flag)
    #         for i in item:
    #             self.assertTrue(-1 <= i <= 1)
